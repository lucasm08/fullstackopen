{"version":3,"sources":["services/persons.js","components/Filter.js","components/PersonForm.js","components/Person.js","components/Persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPerson","post","personOb","id","put","delete","Filter","handlFilter","search","onChange","value","PersonForm","newName","newNumber","setNewName","setNewNumber","handleAddNewName","onSubmit","e","target","type","Person","person","deletePersonHandler","name","number","onClick","Persons","persons","map","key","Notification","notification","message","className","App","useState","setPersons","setSearch","setNotification","useEffect","personService","filterResult","length","filter","toLowerCase","includes","notify","setTimeout","event","preventDefault","exist","find","toLocaleLowerCase","newNameObj","window","confirm","returnedPerson","concat","push","p","catch","error","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.cee3d023.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\nconst newPerson = (newPerson) => {\n    const request = axios.post(baseUrl, newPerson)\n    return request.then(response => response.data)\n}\n\nconst updatePerson = (personOb, id) => {\n    const request = axios.put(`${baseUrl}/${id}`, personOb)\n    return request.then(response => response.data)\n}\n\nconst deletePerson = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default{\n    getAll,\n    newPerson,\n    updatePerson,\n    deletePerson\n}\n","import React from 'react';\n\nconst Filter = ({handlFilter, search}) => {\n    return (\n        <div>\n          filter shown with: <input onChange={handlFilter} value={search} />\n        </div>\n     );\n}\n \nexport default Filter;","import React from 'react';\n\nconst PersonForm = ({newName, newNumber, setNewName, setNewNumber, handleAddNewName }) => {\n    return ( \n        <form onSubmit={handleAddNewName}>\n            <div>\n            name: <input onChange={(e) => { setNewName(e.target.value)}} value={newName} />\n            </div>\n            <div>\n            number: <input onChange={(e) => { setNewNumber(e.target.value)}} value={newNumber} />\n            </div>\n\n            <div>\n            <button type=\"submit\">add</button>\n            </div>\n        </form>\n     );\n}\n \nexport default PersonForm;","import React from 'react';\n\nconst Person = ({person, deletePersonHandler}) => {\n    return ( \n        <p>\n            {person.name}  \n            {person.number}\n            <button onClick={() => {deletePersonHandler(person)}}>delete</button>\n        </p> \n    );\n}\n \nexport default Person;","import React from 'react';\nimport Person from './Person'\n\nconst Persons = ({persons, deletePersonHandler}) => {\n    return ( \n        <div>\n            {\n                persons.map(person => {\n                    return (\n                        <Person \n                            deletePersonHandler={deletePersonHandler} \n                            key={person.name} \n                            person={person} \n                        />\n                    )\n                })\n            }\n\n        </div>\n       \n     );\n}\n \nexport default Persons;","import React from 'react';\n\n\nconst Notification = ({notification}) => {\n    if(notification.message === null) {\n        return null\n    }\n    return (\n        <div className={`notification ${notification.type}`}>\n            {notification.message}\n        </div>\n     );\n}\n \nexport default Notification;","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport Notification from './components/Notification';\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n  const [ search, setSearch] = useState('')\n  const [ notification, setNotification]  = useState({\n    message: null,\n    type: null\n  })\n\n  useEffect(() => {\n    personService.getAll()\n    .then(persons =>\n        setPersons(persons)\n    )\n  }, [])\n\n  let filterResult = search.length\n    ? persons.filter(\n        person => (\n          person.name.toLowerCase().includes(search.toLowerCase())\n        )\n      ) \n    : persons\n  \n  const handlFilter = (event) => {\n    setSearch(event.target.value)\n    filterResult = persons.filter(\n      person => (\n        person.name.toLowerCase().includes(search.toLowerCase())\n        )\n      )\n  }\n\n  const deletePersonHandler = (person) => {\n    if (window.confirm(`Delete ${person.name}?`)) { \n        personService.deletePerson(person.id)\n        .then(data => {\n            setPersons(persons.filter(p => p.id !== person.id))\n            notify({\n              message: `deleted ${person.name} successfully!`,\n              type: 'success'\n            })\n        })\n        .catch(error => {\n          notify({\n            message: `${person.name} was already deleted from server`,\n            type: 'error'\n          })\n        })\n    }\n  }\n\n  const notify = (notification) => {\n    setNotification({\n      message: notification.message,\n      type: notification.type\n    })\n\n    setTimeout(() => {\n      setNotification({\n        message: null,\n        type: null,\n      })\n    }, 5000)\n  }\n\n\n  const handleAddNewName = (event) => {\n    event.preventDefault()\n    const exist = persons.find(person => {\n      return person.name.toLocaleLowerCase() === newName.toLocaleLowerCase()\n    })\n\n    const newNameObj =  {\n      name: newName,\n      number: newNumber\n    }\n\n    if(exist) {\n      if(\n        window.confirm(\n          `${newName} is already added to the phonebook, replace the old number with a new one?`\n        )\n      ) {\n        personService.updatePerson(newNameObj, exist.id)\n        .then(returnedPerson => {\n          setPersons(persons.map(person => {\n            return person.id === returnedPerson.id ? returnedPerson : person\n          }))\n          notify({\n            message: `Updadated ${returnedPerson.name}'s phone number successfully!`,\n            type: 'success'\n          })\n        })\n      }\n      return;\n    }\n\n     personService.newPerson(newNameObj)\n     .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        setNewName('')\n        setNewNumber('')\n        notify({\n          message: `Added ${returnedPerson.name} successfully!`,\n          type: 'success'\n        })\n        if(returnedPerson.name.toLowerCase().includes(search.toLowerCase())){\n          filterResult.push(returnedPerson)\n        }\n\n     })\n     \n  }\n\n  return (\n    <div>\n      <div>debug: {newName}</div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification} />\n      <Filter handlFilter={handlFilter} search={search} />\n      <h2>Add new</h2>\n      <PersonForm\n        newName={newName}\n        newNumber={newNumber}\n        setNewName={setNewName}\n        setNewNumber={setNewNumber}\n        handleAddNewName={handleAddNewName}\n      />\n      <h2>Numbers</h2>\n      <Persons \n        persons={filterResult}\n        deletePersonHandler={deletePersonHandler}\n\n      />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}